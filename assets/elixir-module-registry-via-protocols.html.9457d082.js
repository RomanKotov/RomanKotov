import{r as e,o,c as r,a as s,d as l,F as t,b as n,e as p}from"./app.f80e3e6e.js";import{_ as c}from"./plugin-vue_export-helper.5a098b48.js";const B={},i=s("h1",{id:"elixir-module-registry-via-protocols",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#elixir-module-registry-via-protocols","aria-hidden":"true"},"#"),n(" Elixir module registry via Protocols")],-1),y=n("The core idea of this article is that elixir protocols have a very interesting "),F={href:"https://hexdocs.pm/elixir/1.12/Protocol.html#module-reflection",target:"_blank",rel:"noopener noreferrer"},A=n("reflection feature"),m=n(":"),d=p(`<div class="language-elixir ext-elixir"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#E5C07B;">SomeProtocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__protocol__</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">impls</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre></div><p>It can return the following results:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">not_consolidated</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Or</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">consolidated</span><span style="color:#ABB2BF;">, implementations}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This method lists available implementations when the Protocol is consolidated.</p><h2 id="where-this-can-help" tabindex="-1"><a class="header-anchor" href="#where-this-can-help" aria-hidden="true">#</a> Where this can help</h2><p>This feature can be useful when you need to create a registry for modules. Let&#39;s consider a couple of examples:</p><h3 id="model-serialization-deserialization" tabindex="-1"><a class="header-anchor" href="#model-serialization-deserialization" aria-hidden="true">#</a> Model serialization/deserialization</h3>`,7),b=n("I was creating a "),u={href:"https://mopidy.com",target:"_blank",rel:"noopener noreferrer"},D=n("mopidy"),E=n(" API wrapper in elixir to play a music in our office. I did not find a websocket implementation for it, so decided to create a simple one by myself."),C=p(`<p>I needed to convert JSON-RPC models to elixir structs and back.</p><p>I was thinking about a way to register available models. A conversion may be implemented with a simple map like:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#ABB2BF;">%{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;model_1&quot;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Module1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;model_2&quot;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Module2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>I decided to search for extra solutions according to these criteria:</p><ul><li>People usually forget to update explicit mappings. Model registration should be automated.</li><li>I should be able to extend models with extra functions.</li><li>Model definition should be brief and easy to understand.</li><li>I would like to store one model per file.</li><li>It would be nice to have all the models at compile time.</li><li>Easy to write seialization/deserialization for extra formats.</li></ul><p>Initial solution did not match all these criteria, but it was good enough. You can find it later in this article.</p><p>After some time a similar task appeared. I reviewed a previous solution and decided to research a little bit more, and liked the result better. Here is a simplified example of the core ideas:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defprotocol</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) :: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Model</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">alias</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ModelProtocol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defmacro</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__using__</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> name, </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> fields) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">quote</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register_attribute</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">__MODULE__</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">model_name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">persist:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">@model_name</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">defstruct</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(fields)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;">, for: </span><span style="color:#E5C07B;">Atom</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(module) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attributes</span></span>
<span class="line"><span style="color:#ABB2BF;">      |&gt; </span><span style="color:#61AFEF;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__info__</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">model_name</span><span style="color:#ABB2BF;">, [])</span></span>
<span class="line"><span style="color:#ABB2BF;">      |&gt; </span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">first</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">registered_models</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    models </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__protocol__</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">impls</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">consolidated</span><span style="color:#ABB2BF;">, modules} -&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          modules</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;"> -&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extract_impls</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#56B6C2;">:code</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lib_dir</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          )</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> model &lt;- models,</span></span>
<span class="line"><span style="color:#ABB2BF;">        model.</span><span style="color:#61AFEF;">__info__</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attributes</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has_key?</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">model_name</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">into:</span><span style="color:#ABB2BF;"> %{},</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(model), model}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(%{</span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> name, </span><span style="color:#D19A66;">params:</span><span style="color:#ABB2BF;"> params}) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">registered_models</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    |&gt; </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fetch!</span><span style="color:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    |&gt; </span><span style="color:#61AFEF;">struct!</span><span style="color:#ABB2BF;">(params)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">serialize</span><span style="color:#ABB2BF;">(data) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    %{</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelProtocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(data),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">params:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from_struct</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Sample1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Model</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;sample1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">field1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">field2</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Sample2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ModelExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Model</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;sample2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">number_field:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">binary_field:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;example&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; ModelExample.Model.serialize(%ModelExample.Sample1{field1: 1, field2: 2})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># %{name: &quot;sample1&quot;, params: %{field1: 1, field2: 2}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; ModelExample.Model.deserialize(%{name: &quot;sample1&quot;, params: %{field1: 1, field2: 2}})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># %ModelExample.Sample1{field1: 1, field2: 2}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><h3 id="tagged-modules" tabindex="-1"><a class="header-anchor" href="#tagged-modules" aria-hidden="true">#</a> Tagged modules</h3><p>When I was searching for a solution of model serialization task, I tried to solve it through tagging modules. You can also implement tagging with module registry, like this:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defprotocol</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tags</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) :: [</span><span style="color:#61AFEF;">atom</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tags</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Tag</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">alias</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Tagged</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defmacro</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__using__</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_opts</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">quote</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register_attribute</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">__MODULE__</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">persist:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">accumulate:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tags</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attributes</span></span>
<span class="line"><span style="color:#ABB2BF;">          |&gt; </span><span style="color:#E06C75;">@for</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__info__</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag</span><span style="color:#ABB2BF;">, [])</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;">, for: </span><span style="color:#E5C07B;">Atom</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tags</span><span style="color:#ABB2BF;">(module) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attributes</span></span>
<span class="line"><span style="color:#ABB2BF;">      |&gt; </span><span style="color:#61AFEF;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__info__</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag</span><span style="color:#ABB2BF;">, [])</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tagged_modules</span><span style="color:#ABB2BF;">() :: [</span><span style="color:#61AFEF;">module</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tagged_modules</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    modules </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__protocol__</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">impls</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">consolidated</span><span style="color:#ABB2BF;">, modules} -&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          modules</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;"> -&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extract_impls</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#56B6C2;">:code</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lib_dir</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          )</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> module &lt;- modules,</span></span>
<span class="line"><span style="color:#ABB2BF;">        module.</span><span style="color:#61AFEF;">__info__</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attributes</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has_key?</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> module</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">modules_with_tag</span><span style="color:#ABB2BF;">(tag :: </span><span style="color:#61AFEF;">atom</span><span style="color:#ABB2BF;">()) :: [</span><span style="color:#61AFEF;">module</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">modules_with_tag</span><span style="color:#ABB2BF;">(tag) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> module &lt;- </span><span style="color:#61AFEF;">tagged_modules</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">        module</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tags</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Enum</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">member?</span><span style="color:#ABB2BF;">(tag),</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> module</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TaggedModule1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@tag</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag1</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@tag</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag2</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TaggedModule2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TagExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@tag</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag2</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@tag</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag3</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; TagExample.Tag.tagged_modules()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [TagExample.TaggedModule2, TagExample.TaggedModule1]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; TagExample.Tag.modules_with_tag(:tag2)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [TagExample.TaggedModule2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; TagExample.Tag.modules_with_tag(:nonexisting_tag)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># []</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br></div></div><h2 id="implementation-challenges" tabindex="-1"><a class="header-anchor" href="#implementation-challenges" aria-hidden="true">#</a> Implementation challenges</h2><p>I have learnt some new things while working on these examples. Let&#39;s look at them:</p><h3 id="empty-protocol" tabindex="-1"><a class="header-anchor" href="#empty-protocol" aria-hidden="true">#</a> Empty protocol</h3><p>It turns out that you can create an empty protocol, and even implement it, but it will lead to a compile-time warning:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defprotocol</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">EmptyProtocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">EmptyProtocol</span><span style="color:#ABB2BF;">, for: </span><span style="color:#E5C07B;">Atom</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># warning: module EmptyProtocol is not a behaviour (in module EmptyProtocol.Atom)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#  lib/empty_protocol.ex:4: EmptyProtocol.Atom (module)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>I would recommend to add some functions to the protocol, but empty one will be enough if you want to use it as a registry.</p><h3 id="consolidation-and-dev-mode" tabindex="-1"><a class="header-anchor" href="#consolidation-and-dev-mode" aria-hidden="true">#</a> Consolidation and dev mode</h3><p><code>SomeProtocol.__protocol__(:impls)</code> worked fine on my PC while I was creating simple scripts. It&#39;s return value always was <code>{:consolidated, implementations}</code>. It began to return <code>:not_consolidated</code> after I started to integrate it with Phoenix. I was able to consolidate protocol in development mode by running <code>recompile</code> from <code>iex</code> session.</p><p>Every file change turned the protocol back to <code>:not_consolidated</code>, so I had to trigger recompilation manually every time.</p>`,20),h=n("After some research I started to use "),f={href:"https://hexdocs.pm/elixir/1.12/Protocol.html",target:"_blank",rel:"noopener noreferrer"},g=n("Protocol.extract_impls/2"),_=n(" for not consolidated protocol. This solution is much less performant, because it has to scan all module paths."),x=n("There is a tweak to reduce a number of "),v={href:"https://github.com/elixir-lang/elixir/blob/a64d42f5d3cb6c32752af9d3312897e8cd5bb7ec/lib/mix/lib/mix/tasks/compile.protocols.ex#L111",target:"_blank",rel:"noopener noreferrer"},k=n("consolidation paths"),w=n(", but it will not help to match the performance of consolidated variant. It just skips standard library paths."),M=p(`<p>I would recommend using a consolidated version in production and <code>Protocol.extract_impls/2</code> in development.</p><h3 id="persisting-attributes" tabindex="-1"><a class="header-anchor" href="#persisting-attributes" aria-hidden="true">#</a> Persisting attributes</h3><p>Both example solutions persisted their values in module attributes. These attributes will be erased after compilation, and their values will be inlined into the code. If you need to access them from the outside of the module, you can persist them with:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register_attribute</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">__MODULE__</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attribute_name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">persist:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,4),I=n("Persisting module attributes may be enough for demo purposes, but it is better to pick another approach for production systems, like creating a module function or adopting some behaviour. "),P={href:"http://erlang.org/doc/reference_manual/modules.html#module_info-1",target:"_blank",rel:"noopener noreferrer"},T=n("Module attributes docs"),S=n(" state that they may become empty."),q=p(`<blockquote><p>The list of attributes becomes empty if the module is stripped with the beam_lib(3) module (in STDLIB).</p></blockquote><p>It is better to use them with caution in production.</p><h3 id="defimpl-for-structure-and-for-atom" tabindex="-1"><a class="header-anchor" href="#defimpl-for-structure-and-for-atom" aria-hidden="true">#</a> <code>Defimpl</code> for structure and for atom</h3><p>I have also learnt one interesting and slightly confusing thing for elixir protocols. For example:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defprotocol</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DefimplExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) :: </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DefimplExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ModuleImplementation</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DefimplExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DefimplExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">StructImplementation</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defstruct</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">some_attribute</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DefimplExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; DefimplExample.Protocol.some_method(DefimplExample.ModuleImplementation)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ** (Protocol.UndefinedError) protocol DefimplExample.Protocol not implemented for DefimplExample.ModuleImplementation of type Atom. This protocol is implemented for the following type(s): DefimplExample.StructImplementation, DefimplExample.ModuleImplementation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#     lib/defimpl_example.ex:1: DefimplExample.Protocol.impl_for!/1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#     lib/defimpl_example.ex:3: DefimplExample.Protocol.some_method/1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; DefimplExample.Protocol.some_method(DefimplExample.StructImplementation)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ** (Protocol.UndefinedError) protocol DefimplExample.Protocol not implemented for DefimplExample.StructImplementation of type Atom. This protocol is implemented for the following type(s): DefimplExample.StructImplementation, DefimplExample.ModuleImplementation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#     lib/defimpl_example.ex:1: DefimplExample.Protocol.impl_for!/1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#     lib/defimpl_example.ex:3: DefimplExample.Protocol.some_method/1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; DefimplExample.Protocol.some_method(%DefimplExample.ModuleImplementation{})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ** (CompileError) iex:1: DefimplExample.ModuleImplementation.__struct__/1 is undefined, cannot expand struct DefimplExample.ModuleImplementation. Make sure the struct name is correct. If the struct name exists and is correct but it still cannot be found, you likely have cyclic module usage in your code</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#    (stdlib 3.13) lists.erl:1354: :lists.mapfoldl/3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; DefimplExample.Protocol.some_method(%DefimplExample.StructImplementation{})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># :ok</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>Let&#39;s consider calling protocol for these cases:</p><ul><li><strong>Module name</strong>. It is an atom by nature, so protocol will search an implementation for Atom. If you don&#39;t have one, you will get an error.</li><li><strong>Structure</strong>. If you implement a protocol for a structure (<code>DefimplExample.StructImplementation</code>), you will be able to call it only like <code>%DefimplExample.StructImplementation{}</code>. Calling a protocol with module name will also result in error.</li></ul><p>I would recommend creating a separate implementation for <code>Atom</code> if you plan to support plain modules without structures, as well as structure modules by themselves. In other case you may end up with unreachable code, or use protocol only for tagging purposes.</p><h3 id="infinite-loop-with-for" tabindex="-1"><a class="header-anchor" href="#infinite-loop-with-for" aria-hidden="true">#</a> Infinite loop with <code>@for</code></h3>`,9),z=n("Another observation is related to the "),O=s("code",null,"@for",-1),L=n(". "),W={href:"https://hexdocs.pm/elixir/1.12/Protocol.html#module-multiple-implementations",target:"_blank",rel:"noopener noreferrer"},R=n("According to the documentation"),U=n(":"),K=p(`<blockquote><p>Inside defimpl/3, you can use @protocol to access the protocol being implemented and @for to access the module it is being defined for.</p></blockquote><p>Let&#39;s consider an example:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defprotocol</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ForExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) :: </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ForExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;">, for: </span><span style="color:#E5C07B;">Atom</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ForExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Implementation</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defstruct</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attribute</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ForExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">@for</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; ForExample.Protocol.some_method(ForExample.Implementation)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># :ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; ForExample.Protocol.some_method(%ForExample.Implementation{})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># infinite loop</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><code>@for</code> here points to the <code>ForExample.Implementation</code> module. Module name is an atom, so, calling a function with it should call an implementation for Atom. But actually it calls not the protocol implementation, but the function itself. This leads to infinite tail-recursive loop in our example.</p><p>To actually call a protocol, you can do something like this:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ForExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Implementation</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defstruct</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attribute</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ForExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">_</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">@protocol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">@for</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; ForExample.Protocol.some_method(%ForExample.Implementation{})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># :ok</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="overriding-implementations" tabindex="-1"><a class="header-anchor" href="#overriding-implementations" aria-hidden="true">#</a> Overriding implementations</h3><p>It turned out that if you try to define defimpl multiple times for the same module, the last one will overwrite previous ones, and also show a warning about it.</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defprotocol</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">OverrideExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">@spec</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) :: </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">OverrideExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;">, for: </span><span style="color:#E5C07B;">Atom</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">original</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">OverrideExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Protocol</span><span style="color:#ABB2BF;">, for: </span><span style="color:#E5C07B;">Atom</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">some_method</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">override</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># warning: redefining module OverrideExample.Protocol.Atom (current version loaded from _build/dev/lib/test/ebin/Elixir.OverrideExample.Protocol.Atom.beam)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#  lib/override_example.ex:10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; OverrideExample.Protocol.some_method(:override)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># :ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># iex&gt; OverrideExample.Protocol.some_method(:original)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ** (FunctionClauseError) no function clause matching in OverrideExample.Protocol.Atom.some_method/1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#    The following arguments were given to OverrideExample.Protocol.Atom.some_method/1:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#       # 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#       :original</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#    Attempted function clauses (showing 1 out of 1):</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#        def some_method(:override)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#    lib/override_example.ex:11: OverrideExample.Protocol.Atom.some_method/1</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>I would recommend to implement a protocol only once per data type. This should protect you from future surprises.</p><h2 id="alternative-implementations" tabindex="-1"><a class="header-anchor" href="#alternative-implementations" aria-hidden="true">#</a> Alternative implementations</h2><p>You can also implement a module registry with other approaches:</p><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><p>The most simple solution. The only issue with it, that you, or other maintainer should remember to keep this map up to date.</p><h3 id="enumerating-modules" tabindex="-1"><a class="header-anchor" href="#enumerating-modules" aria-hidden="true">#</a> Enumerating modules</h3>`,15),J={href:"https://elixirforum.com/t/getting-a-list-of-tagged-modules/3804/11",target:"_blank",rel:"noopener noreferrer"},N=n("Module enumeration"),V=n(" was one of the first things I have found."),G=p(`<div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Tagged</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list_tagged_modules</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">ok</span><span style="color:#ABB2BF;">, modules} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">:application</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_key</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Application</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_application</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">__MODULE__</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">modules</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Enum</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(modules, </span><span style="color:#E06C75;">&amp;</span><span style="color:#ABB2BF;">is_tagged</span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defp</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_tagged</span><span style="color:#ABB2BF;">(mod) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">attributes</span></span>
<span class="line"><span style="color:#ABB2BF;">    |&gt; </span><span style="color:#61AFEF;">mod</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__info__</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has_key?</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">tag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>It works fine, but requires listing and checking of every module, so is not very performant. Performance issue may be solved with:</p><h3 id="runtime-cache" tabindex="-1"><a class="header-anchor" href="#runtime-cache" aria-hidden="true">#</a> Runtime cache</h3><p>The idea here is to create a mapping in runtime, and to cache it with something like:</p>`,4),Y={href:"https://hexdocs.pm/elixir/1.12/Registry.html",target:"_blank",rel:"noopener noreferrer"},j=n("Registry"),H={href:"https://elixir-lang.org/getting-started/mix-otp/ets.html",target:"_blank",rel:"noopener noreferrer"},Q=n("ETS"),X=n(" or "),Z={href:"https://erlang.org/doc/man/dets.html",target:"_blank",rel:"noopener noreferrer"},$=n("DETS"),ss={href:"https://erlang.org/doc/man/mnesia.html",target:"_blank",rel:"noopener noreferrer"},ns=n("mnesia"),as={href:"https://hexdocs.pm/elixir/1.12/GenServer.html",target:"_blank",rel:"noopener noreferrer"},ls=n("GenServer"),ps={href:"https://hexdocs.pm/elixir/1.12/Agent.html",target:"_blank",rel:"noopener noreferrer"},es=n("Agent"),os={href:"https://hexdocs.pm/elixir/1.12/Application.html#get_env/3",target:"_blank",rel:"noopener noreferrer"},rs=n("Application get_env"),ts=n(" or their runtime analogs. "),cs={href:"https://hexdocs.pm/elixir/master/library-guidelines.html#avoid-compile-time-application-configuration",target:"_blank",rel:"noopener noreferrer"},Bs=n("This approach is not recommended for libraries"),is=n("."),ys=s("li",null,"possibly some other similar approach.",-1),Fs=p(`<p>Cache will surely help with lookup performance, but can introduce cache invalidation issues and extra complexity.</p><h3 id="compile-time-module-workarounds" tabindex="-1"><a class="header-anchor" href="#compile-time-module-workarounds" aria-hidden="true">#</a> Compile-time module workarounds</h3><p>Here I have attached an initial solution for model serialization task.</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Generator</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defmacro</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(model_name, </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> fields) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    model_keys </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> fields |&gt; </span><span style="color:#E5C07B;">Keyword</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    model_name_str </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> model_name |&gt; </span><span style="color:#E5C07B;">Macro</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">quote</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> unquote(model_name) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">defstruct</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(model_keys)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">@type</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() :: %</span><span style="color:#E5C07B;">__MODULE__</span><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">unquote_splicing</span><span style="color:#ABB2BF;">(fields)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Jason</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Encoder</span><span style="color:#ABB2BF;">, for: __MODULE__ </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(data, opts) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">            data</span></span>
<span class="line"><span style="color:#ABB2BF;">            |&gt; </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from_struct</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            |&gt; </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;__model__&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(model_name_str))</span></span>
<span class="line"><span style="color:#ABB2BF;">            |&gt; </span><span style="color:#E5C07B;">Jason</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Encode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(opts)</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> %{</span><span style="color:#98C379;">&quot;__model__&quot;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(model_name_str)}) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        model_data </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> key &lt;- </span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(model_keys) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">            {key, data[</span><span style="color:#98C379;">&quot;</span><span style="color:#C678DD;">#{</span><span style="color:#98C379;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">] |&gt; </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">struct</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(model_name), model_data)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Generator</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">only:</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">defmodel:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">type:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Track</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">artists:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Artist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">album:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Album</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">composers:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Artist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">performers:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Artist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">genre:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">track_no:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">disc_no:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">date:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">length:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">bitrate:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">comment:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">muzicbrainz_id:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">last_modified:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Album</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">artists:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Artist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">num_tracks:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">num_discs:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">date:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">muzicbrainz_id:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Artist</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">shortname:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">muzicbrainz_id:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Playlist</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">tracks:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Track</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">last_modified:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Image</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">width:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">height:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TlTrack</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">tlid:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">integer</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">track:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Track</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defmodel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SearchResult</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">fields:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">tracks:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Track</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">artists:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Artist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">albums:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Album</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()) | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(result) when </span><span style="color:#61AFEF;">is_map</span><span style="color:#ABB2BF;">(result) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> {key, value} &lt;- result, </span><span style="color:#D19A66;">into:</span><span style="color:#ABB2BF;"> %{} </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      {key, </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(value)}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(result) when </span><span style="color:#61AFEF;">is_list</span><span style="color:#ABB2BF;">(result), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> result |&gt; </span><span style="color:#E5C07B;">Enum</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">&amp;</span><span style="color:#ABB2BF;">deserialize</span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(result), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> result</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br></div></div><p>After the macroexpansion we will get something like this:</p><div class="language-elixir ext-elixir line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MopidyWS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Models</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">defstruct</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">uri</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">@type</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() :: %</span><span style="color:#E5C07B;">__MODULE__</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">type:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">uri:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">() | </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">defimpl</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Jason</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Encoder</span><span style="color:#ABB2BF;">, for: __MODULE__ </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(data, opts) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        data</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from_struct</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;__model__&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Ref&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        |&gt; </span><span style="color:#E5C07B;">Jason</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Encode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(opts)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> %{</span><span style="color:#98C379;">&quot;__model__&quot;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#98C379;">&quot;Ref&quot;</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    model_data </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> key &lt;- [</span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">:</span><span style="color:#56B6C2;">uri</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">        {key, data[</span><span style="color:#98C379;">&quot;</span><span style="color:#C678DD;">#{</span><span style="color:#98C379;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">] |&gt; </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">struct</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">unquote</span><span style="color:#ABB2BF;">(model_name), model_data)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">defmodule</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Track</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># autogenerated model code</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> %{</span><span style="color:#98C379;">&quot;__model__&quot;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#98C379;">&quot;Track&quot;</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># deserialization code for Track model</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># other models</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(result) when </span><span style="color:#61AFEF;">is_map</span><span style="color:#ABB2BF;">(result) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> {key, value} &lt;- result, </span><span style="color:#D19A66;">into:</span><span style="color:#ABB2BF;"> %{} </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">      {key, </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(value)}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(result) when </span><span style="color:#61AFEF;">is_list</span><span style="color:#ABB2BF;">(result), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> result |&gt; </span><span style="color:#E5C07B;">Enum</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">&amp;</span><span style="color:#ABB2BF;">deserialize</span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deserialize</span><span style="color:#ABB2BF;">(result), </span><span style="color:#D19A66;">do:</span><span style="color:#ABB2BF;"> result</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>I see the following drawbacks with it:</p><ul><li>It creates multiple modules in the same file.</li><li>It relies on the order of macros evaluation, otherwise <code>deserialize</code> function will not work properly.</li><li>Any extra code in the model will require more metaprogramming.</li><li>If I will add any other function between calls of <code>defmodel</code>, it will show warnings. It does not show them yet, because allows to create modules between function heads.</li></ul><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>This was a nice journey, where we have learnt how to use elixir protocol as a module registry, with some edge cases. We have also discussed ways to achieve similar results. Thanks for reading!</p>`,10);function As(ms,ds){const a=e("OutboundLink");return o(),r(t,null,[i,s("p",null,[y,s("a",F,[A,l(a)]),m]),d,s("p",null,[b,s("a",u,[D,l(a)]),E]),C,s("p",null,[h,s("a",f,[g,l(a)]),_]),s("p",null,[x,s("a",v,[k,l(a)]),w]),M,s("p",null,[I,s("a",P,[T,l(a)]),S]),q,s("p",null,[z,O,L,s("a",W,[R,l(a)]),U]),K,s("p",null,[s("a",J,[N,l(a)]),V]),G,s("ul",null,[s("li",null,[s("a",Y,[j,l(a)])]),s("li",null,[s("a",H,[Q,l(a)]),X,s("a",Z,[$,l(a)])]),s("li",null,[s("a",ss,[ns,l(a)])]),s("li",null,[s("a",as,[ls,l(a)])]),s("li",null,[s("a",ps,[es,l(a)])]),s("li",null,[s("a",os,[rs,l(a)]),ts,s("a",cs,[Bs,l(a)]),is]),ys]),Fs],64)}var Ds=c(B,[["render",As]]);export{Ds as default};
